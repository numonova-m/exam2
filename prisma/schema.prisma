generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   
  email       String   @unique
  password    String
  role        Role     @default(USER)
  avatarUrl   String?
  createdAt   DateTime @default(now())
  profiles    Profile[]
  subscriptions UserSubscription[]
  reviews     Review[]
  favorites   Favorite[]
  watchHistory WatchHistory[]
  movies      Movie[] @relation("UserMovies")
  createdById String? 
  @@map("user")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String
  fullName  String
  phone     String?
  country   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@map("profile")
}

model SubscriptionPlan {
  id             String   @id @default(uuid())
  name           String
  price          Float
  durationDays   Int
  features       Json
  isActive       Boolean  @default(true)
  subscriptions  UserSubscription[]
  @@map("subscripption-plan")
}

model UserSubscription {
  id        String   @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(PENDING_PAYMENT)
  autoRenew Boolean @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  payments  Payment[]
  @@map("user-subscription")
}

model Payment {
  id        String   @id @default(uuid())
  subscriptionId String
  amount    Float
  paymentMethod PaymentMethod
  paymentDetails Json
  status    PaymentStatus @default(PENDING)
  externalTransactionId String?
  createdAt DateTime @default(now())
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id])
  @@map("payment")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  movies      MovieCategory[]
  @@map("category")
}

model Movie {
  id               String   @id @default(uuid())
  title            String
  slug             String   @unique
  description      String?
  releaseYear      Int
  durationMinutes  Int
  posterUrl        String?
  rating           Float    @default(0.0)
  subscriptionType SubscriptionType @default(FREE)
  viewCount        Int      @default(0)
  createdAt        DateTime @default(now())
  createdById      String?
  createdBy        User?    @relation("UserMovies", fields: [createdById], references: [id])
  categories       MovieCategory[]
  files            MovieFile[]
  reviews          Review[]
  favorites        Favorite[]
  watchHistory     WatchHistory[]
  @@map("movie")
}

model MovieCategory {
  id         String   @id @default(uuid())
  movieId    String
  categoryId String
  movie      Movie     @relation(fields: [movieId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  @@map("movie-category")
}

model MovieFile {
  id        String   @id @default(uuid())
  movieId   String
  fileUrl   String
  quality   VideoQuality
  language  String  @default("uz")
  movie     Movie   @relation(fields: [movieId], references: [id])
  @@map("movie-file")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  @@map("favorite")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  @@map("review")
}

model WatchHistory {
  id                String   @id @default(uuid())
  userId            String
  movieId           String
  watchedDuration   Int
  watchedPercentage Float
  lastWatched       DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  movie             Movie    @relation(fields: [movieId], references: [id])
  @@map("watch-history")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING_PAYMENT
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  CRYPTO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionType {
  FREE
  PREMIUM
}

enum VideoQuality {
  Q240P
  Q360P
  Q480P
  Q720P
  Q1080P
  Q4K
}
